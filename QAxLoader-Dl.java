/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gdr.qaxloader;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JProgressBar;

/**
 *
 * @author GDR
 */
public class Dl extends javax.swing.JFrame {

    /**
     * Creates new form Dl
     */
    public Dl() {
        initComponents();
        this.setVisible(true);
        this.setLocationRelativeTo(null);
    }
    
    public void execute()
    {
        File dossier = new File("plugins");
        File ex = new File("plugins/QbazTs.jar");
        String path = ex.getAbsolutePath();
        if(dossier.exists() && dossier.isDirectory()){
        //...
        } else
        dossier.mkdir();
        dl("https://dl.dropboxusercontent.com/u/42111847/axloader/plugins/QubazTs.jar",ex,this.jProgressBar1);
        this.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QAxLoader - Téléchargement du fichier en cours...");
        setResizable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    /**
     * @param args the command line arguments
     */
    
    public static void dl(final String adresse, final File dest, final JProgressBar bar)
{
    bar.setIndeterminate(true);
    
    new Thread()
    {
        @Override
        public void run()
        {
            FileOutputStream fos = null;
            BufferedReader reader = null;
            
            try
            {
                // Création de la connexion
                URL url = new URL(adresse);
                
                URLConnection conn = url.openConnection();
                System.out.println(adresse);
                
                String FileType = conn.getContentType();
                System.out.println("FileType : " + FileType);
                
                int fileLength = conn.getContentLength();
         
                if (fileLength == -1)
                    throw new IOException("Fichier non valide.");
                else
                    bar.setMaximum(fileLength);
                
                // Lecture de la réponse
                
                InputStream in = conn.getInputStream();
                reader= new BufferedReader(new InputStreamReader(in));
                
                if (dest == null)
                {
                    String fileName = url.getFile();
                    fileName = fileName.substring(fileName.lastIndexOf('/') + 1);
                    fos = new FileOutputStream(new File(fileName));
                }
                else
                    fos  = new FileOutputStream(dest);
                
                byte[] buff = new byte[1024];

                bar.setValue(0);
                bar.setIndeterminate(false);
                
                int n;
                while ((n=in.read(buff)) !=-1)
                {
                    fos.write(buff, 0, n);
                    bar.setValue(bar.getValue()+n);
                }
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
            finally
            {
                try
                {
                    fos.flush();
                    fos.close();
                }
                catch (IOException e)
                {
                    e.printStackTrace();
                }
                
                try
                {
                    reader.close();
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
        }
    }.start();
}
    
    
    
    
    
    
    // Variables declaration - do not modify                     
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration                   
}
